"""
Questo file contiene alcuni dati utili per gestire le bitboards e altro
"""

export RANKS, FILES, DIAGONALS, ANTI_DIAGONALS, SQUARES_TO_BITBOARDS, BITSQUARES_TO_COORDINATES, BITSQUARES_TO_DAD, BITSQUARES_TO_ID, BITSQUARES_TO_NOTATION

# maschere bit delle traverse
RANKS::Vector{UInt64} = [
0x00000000000000ff, 0x000000000000ff00, 0x0000000000ff0000,
0x00000000ff000000, 0x000000ff00000000, 0x0000ff0000000000,
0x00ff000000000000, 0xff00000000000000];

# maschere bit delle colonne
FILES::Vector{UInt64} = [
0x8080808080808080, 0x4040404040404040,
0x2020202020202020, 0x1010101010101010,
0x0808080808080808, 0x0404040404040404,
0x0202020202020202, 0x0101010101010101];

    # maschere bit delle diagonali
    DIAGONALS::Vector{UInt64} = [
    0x0000000000000001,
    0x0000000000000102, 0x0000000000010204,
    0x0000000001020408, 0x0000000102040810,
    0x0000010204081020, 0x0001020408102040,
    0x0102040810204080, 0x0204081020408000,
    0x0408102040800000, 0x0810204080000000,
    0x1020408000000000, 0x2040800000000000,
    0x4080000000000000, 0x8000000000000000];

    # maschere bit delle anti-diagonali
    ANTI_DIAGONALS::Vector{UInt64} = [
    0x0000000000000080,
    0x0000000000008040, 0x0000000000804020, 
    0x0000000080402010, 0x0000008040201008,
    0x0000804020100804, 0x0080402010080402,
    0x8040201008040201, 0x4020100804020100,
    0x2010080402010000, 0x1008040201000000,
    0x0804020100000000, 0x0402010000000000,
    0x0201000000000000, 0x0100000000000000];

# grande dizionario che permette la traduzione dall'indice della casa alla sua maschera bit e altro
SQUARES_TO_BITBOARDS = Dict(
1 => 0b0000000000000000000000000000000000000000000000000000000000000001,
2 => 0b0000000000000000000000000000000000000000000000000000000000000010,
3 => 0b0000000000000000000000000000000000000000000000000000000000000100,
4 => 0b0000000000000000000000000000000000000000000000000000000000001000,
5 => 0b0000000000000000000000000000000000000000000000000000000000010000,
6 => 0b0000000000000000000000000000000000000000000000000000000000100000,
7 => 0b0000000000000000000000000000000000000000000000000000000001000000,
8 => 0b0000000000000000000000000000000000000000000000000000000010000000,
9 => 0b0000000000000000000000000000000000000000000000000000000100000000,
10 => 0b0000000000000000000000000000000000000000000000000000001000000000,
11 => 0b0000000000000000000000000000000000000000000000000000010000000000,
12 => 0b0000000000000000000000000000000000000000000000000000100000000000,
13 => 0b0000000000000000000000000000000000000000000000000001000000000000,
14 => 0b0000000000000000000000000000000000000000000000000010000000000000,
15 => 0b0000000000000000000000000000000000000000000000000100000000000000,
16 => 0b0000000000000000000000000000000000000000000000001000000000000000,
17 => 0b0000000000000000000000000000000000000000000000010000000000000000,
18 => 0b0000000000000000000000000000000000000000000000100000000000000000,
19 => 0b0000000000000000000000000000000000000000000001000000000000000000,
20 => 0b0000000000000000000000000000000000000000000010000000000000000000,
21 => 0b0000000000000000000000000000000000000000000100000000000000000000,
22 => 0b0000000000000000000000000000000000000000001000000000000000000000,
23 => 0b0000000000000000000000000000000000000000010000000000000000000000,
24 => 0b0000000000000000000000000000000000000000100000000000000000000000,
25 => 0b0000000000000000000000000000000000000001000000000000000000000000,
26 => 0b0000000000000000000000000000000000000010000000000000000000000000,
27 => 0b0000000000000000000000000000000000000100000000000000000000000000,
28 => 0b0000000000000000000000000000000000001000000000000000000000000000,
29 => 0b0000000000000000000000000000000000010000000000000000000000000000,
30 => 0b0000000000000000000000000000000000100000000000000000000000000000,
31 => 0b0000000000000000000000000000000001000000000000000000000000000000,
32 => 0b0000000000000000000000000000000010000000000000000000000000000000,
33 => 0b0000000000000000000000000000000100000000000000000000000000000000,
34 => 0b0000000000000000000000000000001000000000000000000000000000000000,
35 => 0b0000000000000000000000000000010000000000000000000000000000000000,
36 => 0b0000000000000000000000000000100000000000000000000000000000000000,
37 => 0b0000000000000000000000000001000000000000000000000000000000000000,
38 => 0b0000000000000000000000000010000000000000000000000000000000000000,
39 => 0b0000000000000000000000000100000000000000000000000000000000000000,
40 => 0b0000000000000000000000001000000000000000000000000000000000000000,
41 => 0b0000000000000000000000010000000000000000000000000000000000000000,
42 => 0b0000000000000000000000100000000000000000000000000000000000000000,
43 => 0b0000000000000000000001000000000000000000000000000000000000000000,
44 => 0b0000000000000000000010000000000000000000000000000000000000000000,
45 => 0b0000000000000000000100000000000000000000000000000000000000000000,
46 => 0b0000000000000000001000000000000000000000000000000000000000000000,
47 => 0b0000000000000000010000000000000000000000000000000000000000000000,
48 => 0b0000000000000000100000000000000000000000000000000000000000000000,
49 => 0b0000000000000001000000000000000000000000000000000000000000000000,
50 => 0b0000000000000010000000000000000000000000000000000000000000000000,
51 => 0b0000000000000100000000000000000000000000000000000000000000000000,
52 => 0b0000000000001000000000000000000000000000000000000000000000000000,
53 => 0b0000000000010000000000000000000000000000000000000000000000000000,
54 => 0b0000000000100000000000000000000000000000000000000000000000000000,
55 => 0b0000000001000000000000000000000000000000000000000000000000000000,
56 => 0b0000000010000000000000000000000000000000000000000000000000000000,
57 => 0b0000000100000000000000000000000000000000000000000000000000000000,
58 => 0b0000001000000000000000000000000000000000000000000000000000000000,
59 => 0b0000010000000000000000000000000000000000000000000000000000000000,
60 => 0b0000100000000000000000000000000000000000000000000000000000000000,
61 => 0b0001000000000000000000000000000000000000000000000000000000000000,
62 => 0b0010000000000000000000000000000000000000000000000000000000000000,
63 => 0b0100000000000000000000000000000000000000000000000000000000000000,
64 => 0b1000000000000000000000000000000000000000000000000000000000000000,
"h1" => 0b0000000000000000000000000000000000000000000000000000000000000001,
"g1" => 0b0000000000000000000000000000000000000000000000000000000000000010,
"f1" => 0b0000000000000000000000000000000000000000000000000000000000000100,
"e1" => 0b0000000000000000000000000000000000000000000000000000000000001000,
"d1" => 0b0000000000000000000000000000000000000000000000000000000000010000,
"c1" => 0b0000000000000000000000000000000000000000000000000000000000100000,
"b1" => 0b0000000000000000000000000000000000000000000000000000000001000000,
"a1" => 0b0000000000000000000000000000000000000000000000000000000010000000,
"h2" => 0b0000000000000000000000000000000000000000000000000000000100000000,
"g2" => 0b0000000000000000000000000000000000000000000000000000001000000000,
"f2" => 0b0000000000000000000000000000000000000000000000000000010000000000,
"e2" => 0b0000000000000000000000000000000000000000000000000000100000000000,
"d2" => 0b0000000000000000000000000000000000000000000000000001000000000000,
"c2" => 0b0000000000000000000000000000000000000000000000000010000000000000,
"b2" => 0b0000000000000000000000000000000000000000000000000100000000000000,
"a2" => 0b0000000000000000000000000000000000000000000000001000000000000000,
"h3" => 0b0000000000000000000000000000000000000000000000010000000000000000,
"g3" => 0b0000000000000000000000000000000000000000000000100000000000000000,
"f3" => 0b0000000000000000000000000000000000000000000001000000000000000000,
"e3" => 0b0000000000000000000000000000000000000000000010000000000000000000,
"d3" => 0b0000000000000000000000000000000000000000000100000000000000000000,
"c3" => 0b0000000000000000000000000000000000000000001000000000000000000000,
"b3" => 0b0000000000000000000000000000000000000000010000000000000000000000,
"a3" => 0b0000000000000000000000000000000000000000100000000000000000000000,
"h4" => 0b0000000000000000000000000000000000000001000000000000000000000000,
"g4" => 0b0000000000000000000000000000000000000010000000000000000000000000,
"f4" => 0b0000000000000000000000000000000000000100000000000000000000000000,
"e4" => 0b0000000000000000000000000000000000001000000000000000000000000000,
"d4" => 0b0000000000000000000000000000000000010000000000000000000000000000,
"c4" => 0b0000000000000000000000000000000000100000000000000000000000000000,
"b4" => 0b0000000000000000000000000000000001000000000000000000000000000000,
"a4" => 0b0000000000000000000000000000000010000000000000000000000000000000,
"h5" => 0b0000000000000000000000000000000100000000000000000000000000000000,
"g5" => 0b0000000000000000000000000000001000000000000000000000000000000000,
"f5" => 0b0000000000000000000000000000010000000000000000000000000000000000,
"e5" => 0b0000000000000000000000000000100000000000000000000000000000000000,
"d5" => 0b0000000000000000000000000001000000000000000000000000000000000000,
"c5" => 0b0000000000000000000000000010000000000000000000000000000000000000,
"b5" => 0b0000000000000000000000000100000000000000000000000000000000000000,
"a5" => 0b0000000000000000000000001000000000000000000000000000000000000000,
"h6" => 0b0000000000000000000000010000000000000000000000000000000000000000,
"g6" => 0b0000000000000000000000100000000000000000000000000000000000000000,
"f6" => 0b0000000000000000000001000000000000000000000000000000000000000000,
"e6" => 0b0000000000000000000010000000000000000000000000000000000000000000,
"d6" => 0b0000000000000000000100000000000000000000000000000000000000000000,
"c6" => 0b0000000000000000001000000000000000000000000000000000000000000000,
"b6" => 0b0000000000000000010000000000000000000000000000000000000000000000,
"a6" => 0b0000000000000000100000000000000000000000000000000000000000000000,
"h7" => 0b0000000000000001000000000000000000000000000000000000000000000000,
"g7" => 0b0000000000000010000000000000000000000000000000000000000000000000,
"f7" => 0b0000000000000100000000000000000000000000000000000000000000000000,
"e7" => 0b0000000000001000000000000000000000000000000000000000000000000000,
"d7" => 0b0000000000010000000000000000000000000000000000000000000000000000,
"c7" => 0b0000000000100000000000000000000000000000000000000000000000000000,
"b7" => 0b0000000001000000000000000000000000000000000000000000000000000000,
"a7" => 0b0000000010000000000000000000000000000000000000000000000000000000,
"h8" => 0b0000000100000000000000000000000000000000000000000000000000000000,
"g8" => 0b0000001000000000000000000000000000000000000000000000000000000000,
"f8" => 0b0000010000000000000000000000000000000000000000000000000000000000,
"e8" => 0b0000100000000000000000000000000000000000000000000000000000000000,
"d8" => 0b0001000000000000000000000000000000000000000000000000000000000000,
"c8" => 0b0010000000000000000000000000000000000000000000000000000000000000,
"b8" => 0b0100000000000000000000000000000000000000000000000000000000000000,
"a8" => 0b1000000000000000000000000000000000000000000000000000000000000000)


# dizionario per passare facilmente da bitsquare a coordinate sulla scacchiera (TRAVERSA, COLONNA)
BITSQUARES_TO_COORDINATES=Dict(
0b0000000000000000000000000000000000000000000000000000000000000001 => (1, 8),
0b0000000000000000000000000000000000000000000000000000000000000010 => (1, 7),
0b0000000000000000000000000000000000000000000000000000000000000100 => (1, 6),
0b0000000000000000000000000000000000000000000000000000000000001000 => (1, 5),
0b0000000000000000000000000000000000000000000000000000000000010000 => (1, 4),
0b0000000000000000000000000000000000000000000000000000000000100000 => (1, 3),
0b0000000000000000000000000000000000000000000000000000000001000000 => (1, 2),
0b0000000000000000000000000000000000000000000000000000000010000000 => (1, 1),
0b0000000000000000000000000000000000000000000000000000000100000000 => (2, 8),
0b0000000000000000000000000000000000000000000000000000001000000000 => (2, 7),
0b0000000000000000000000000000000000000000000000000000010000000000 => (2, 6),
0b0000000000000000000000000000000000000000000000000000100000000000 => (2, 5),
0b0000000000000000000000000000000000000000000000000001000000000000 => (2, 4),
0b0000000000000000000000000000000000000000000000000010000000000000 => (2, 3),
0b0000000000000000000000000000000000000000000000000100000000000000 => (2, 2),
0b0000000000000000000000000000000000000000000000001000000000000000 => (2, 1),
0b0000000000000000000000000000000000000000000000010000000000000000 => (3, 8),
0b0000000000000000000000000000000000000000000000100000000000000000 => (3, 7),
0b0000000000000000000000000000000000000000000001000000000000000000 => (3, 6),
0b0000000000000000000000000000000000000000000010000000000000000000 => (3, 5),
0b0000000000000000000000000000000000000000000100000000000000000000 => (3, 4),
0b0000000000000000000000000000000000000000001000000000000000000000 => (3, 3),
0b0000000000000000000000000000000000000000010000000000000000000000 => (3, 2),
0b0000000000000000000000000000000000000000100000000000000000000000 => (3, 1),
0b0000000000000000000000000000000000000001000000000000000000000000 => (4, 8),
0b0000000000000000000000000000000000000010000000000000000000000000 => (4, 7),
0b0000000000000000000000000000000000000100000000000000000000000000 => (4, 6),
0b0000000000000000000000000000000000001000000000000000000000000000 => (4, 5),
0b0000000000000000000000000000000000010000000000000000000000000000 => (4, 4),
0b0000000000000000000000000000000000100000000000000000000000000000 => (4, 3),
0b0000000000000000000000000000000001000000000000000000000000000000 => (4, 2),
0b0000000000000000000000000000000010000000000000000000000000000000 => (4, 1),
0b0000000000000000000000000000000100000000000000000000000000000000 => (5, 8),
0b0000000000000000000000000000001000000000000000000000000000000000 => (5, 7),
0b0000000000000000000000000000010000000000000000000000000000000000 => (5, 6),
0b0000000000000000000000000000100000000000000000000000000000000000 => (5, 5),
0b0000000000000000000000000001000000000000000000000000000000000000 => (5, 4),
0b0000000000000000000000000010000000000000000000000000000000000000 => (5, 3),
0b0000000000000000000000000100000000000000000000000000000000000000 => (5, 2),
0b0000000000000000000000001000000000000000000000000000000000000000 => (5, 1),
0b0000000000000000000000010000000000000000000000000000000000000000 => (6, 8),
0b0000000000000000000000100000000000000000000000000000000000000000 => (6, 7),
0b0000000000000000000001000000000000000000000000000000000000000000 => (6, 6),
0b0000000000000000000010000000000000000000000000000000000000000000 => (6, 5),
0b0000000000000000000100000000000000000000000000000000000000000000 => (6, 4),
0b0000000000000000001000000000000000000000000000000000000000000000 => (6, 3),
0b0000000000000000010000000000000000000000000000000000000000000000 => (6, 2),
0b0000000000000000100000000000000000000000000000000000000000000000 => (6, 1),
0b0000000000000001000000000000000000000000000000000000000000000000 => (7, 8),
0b0000000000000010000000000000000000000000000000000000000000000000 => (7, 7),
0b0000000000000100000000000000000000000000000000000000000000000000 => (7, 6),
0b0000000000001000000000000000000000000000000000000000000000000000 => (7, 5),
0b0000000000010000000000000000000000000000000000000000000000000000 => (7, 4),
0b0000000000100000000000000000000000000000000000000000000000000000 => (7, 3),
0b0000000001000000000000000000000000000000000000000000000000000000 => (7, 2),
0b0000000010000000000000000000000000000000000000000000000000000000 => (7, 1),
0b0000000100000000000000000000000000000000000000000000000000000000 => (8, 8),
0b0000001000000000000000000000000000000000000000000000000000000000 => (8, 7),
0b0000010000000000000000000000000000000000000000000000000000000000 => (8, 6),
0b0000100000000000000000000000000000000000000000000000000000000000 => (8, 5),
0b0001000000000000000000000000000000000000000000000000000000000000 => (8, 4),
0b0010000000000000000000000000000000000000000000000000000000000000 => (8, 3),
0b0100000000000000000000000000000000000000000000000000000000000000 => (8, 2),
0b1000000000000000000000000000000000000000000000000000000000000000 => (8, 1)
)

# dizionario per passare facilmente da bitsquare a coordinate sulla scacchiera (DIAGONALE, ANTI-DIAGONALE)
BITSQUARES_TO_DAD=Dict(
    0b0000000000000000000000000000000000000000000000000000000000000001 => (1, 8),
    0b0000000000000000000000000000000000000000000000000000000000000010 => (2, 7),
    0b0000000000000000000000000000000000000000000000000000000000000100 => (3, 6),
    0b0000000000000000000000000000000000000000000000000000000000001000 => (4, 5),
    0b0000000000000000000000000000000000000000000000000000000000010000 => (5, 4),
    0b0000000000000000000000000000000000000000000000000000000000100000 => (6, 3),
    0b0000000000000000000000000000000000000000000000000000000001000000 => (7, 2),
    0b0000000000000000000000000000000000000000000000000000000010000000 => (8, 1),
    0b0000000000000000000000000000000000000000000000000000000100000000 => (2, 9),
    0b0000000000000000000000000000000000000000000000000000001000000000 => (3, 8),
    0b0000000000000000000000000000000000000000000000000000010000000000 => (4, 7),
    0b0000000000000000000000000000000000000000000000000000100000000000 => (5, 6),
    0b0000000000000000000000000000000000000000000000000001000000000000 => (6, 5),
    0b0000000000000000000000000000000000000000000000000010000000000000 => (7, 4),
    0b0000000000000000000000000000000000000000000000000100000000000000 => (8, 3),
    0b0000000000000000000000000000000000000000000000001000000000000000 => (9, 2),
    0b0000000000000000000000000000000000000000000000010000000000000000 => (3, 10),
    0b0000000000000000000000000000000000000000000000100000000000000000 => (4, 9),
    0b0000000000000000000000000000000000000000000001000000000000000000 => (5, 8),
    0b0000000000000000000000000000000000000000000010000000000000000000 => (6, 7),
    0b0000000000000000000000000000000000000000000100000000000000000000 => (7, 6),
    0b0000000000000000000000000000000000000000001000000000000000000000 => (8, 5),
    0b0000000000000000000000000000000000000000010000000000000000000000 => (9, 4),
    0b0000000000000000000000000000000000000000100000000000000000000000 => (10, 3),
    0b0000000000000000000000000000000000000001000000000000000000000000 => (4, 11),
    0b0000000000000000000000000000000000000010000000000000000000000000 => (5, 10),
    0b0000000000000000000000000000000000000100000000000000000000000000 => (6, 9),
    0b0000000000000000000000000000000000001000000000000000000000000000 => (7, 8),
    0b0000000000000000000000000000000000010000000000000000000000000000 => (8, 7),
    0b0000000000000000000000000000000000100000000000000000000000000000 => (9, 6),
    0b0000000000000000000000000000000001000000000000000000000000000000 => (10, 5),
    0b0000000000000000000000000000000010000000000000000000000000000000 => (11, 4),
    0b0000000000000000000000000000000100000000000000000000000000000000 => (5, 12),
    0b0000000000000000000000000000001000000000000000000000000000000000 => (6, 11),
    0b0000000000000000000000000000010000000000000000000000000000000000 => (7, 10),
    0b0000000000000000000000000000100000000000000000000000000000000000 => (8, 9),
    0b0000000000000000000000000001000000000000000000000000000000000000 => (9, 8),
    0b0000000000000000000000000010000000000000000000000000000000000000 => (10, 7),
    0b0000000000000000000000000100000000000000000000000000000000000000 => (11, 6),
    0b0000000000000000000000001000000000000000000000000000000000000000 => (12, 5),
    0b0000000000000000000000010000000000000000000000000000000000000000 => (6, 13),
    0b0000000000000000000000100000000000000000000000000000000000000000 => (7, 12),
    0b0000000000000000000001000000000000000000000000000000000000000000 => (8, 11),
    0b0000000000000000000010000000000000000000000000000000000000000000 => (9, 10),
    0b0000000000000000000100000000000000000000000000000000000000000000 => (10, 9),
    0b0000000000000000001000000000000000000000000000000000000000000000 => (11, 8),
    0b0000000000000000010000000000000000000000000000000000000000000000 => (12, 7),
    0b0000000000000000100000000000000000000000000000000000000000000000 => (13, 6),
    0b0000000000000001000000000000000000000000000000000000000000000000 => (7, 14),
    0b0000000000000010000000000000000000000000000000000000000000000000 => (8, 13),
    0b0000000000000100000000000000000000000000000000000000000000000000 => (9, 12),
    0b0000000000001000000000000000000000000000000000000000000000000000 => (10, 11),
    0b0000000000010000000000000000000000000000000000000000000000000000 => (11, 10),
    0b0000000000100000000000000000000000000000000000000000000000000000 => (12, 9),
    0b0000000001000000000000000000000000000000000000000000000000000000 => (13, 8),
    0b0000000010000000000000000000000000000000000000000000000000000000 => (14, 7),
    0b0000000100000000000000000000000000000000000000000000000000000000 => (8, 15),
    0b0000001000000000000000000000000000000000000000000000000000000000 => (9, 14),
    0b0000010000000000000000000000000000000000000000000000000000000000 => (10, 13),
    0b0000100000000000000000000000000000000000000000000000000000000000 => (11, 12),
    0b0001000000000000000000000000000000000000000000000000000000000000 => (12, 11),
    0b0010000000000000000000000000000000000000000000000000000000000000 => (13, 10),
    0b0100000000000000000000000000000000000000000000000000000000000000 => (14, 9),
    0b1000000000000000000000000000000000000000000000000000000000000000 => (15, 8)
)



# dizionario per ottenere la notazione delle case a partire dalla maschera bit
BITSQUARES_TO_NOTATION=Dict(
0b0000000000000000000000000000000000000000000000000000000000000001 => "h1",
0b0000000000000000000000000000000000000000000000000000000000000010 => "g1",
0b0000000000000000000000000000000000000000000000000000000000000100 => "f1",
0b0000000000000000000000000000000000000000000000000000000000001000 => "e1",
0b0000000000000000000000000000000000000000000000000000000000010000 => "d1",
0b0000000000000000000000000000000000000000000000000000000000100000 => "c1",
0b0000000000000000000000000000000000000000000000000000000001000000 => "b1",
0b0000000000000000000000000000000000000000000000000000000010000000 => "a1",
0b0000000000000000000000000000000000000000000000000000000100000000 => "h2",
0b0000000000000000000000000000000000000000000000000000001000000000 => "g2",
0b0000000000000000000000000000000000000000000000000000010000000000 => "f2",
0b0000000000000000000000000000000000000000000000000000100000000000 => "e2",
0b0000000000000000000000000000000000000000000000000001000000000000 => "d2",
0b0000000000000000000000000000000000000000000000000010000000000000 => "c2",
0b0000000000000000000000000000000000000000000000000100000000000000 => "b2",
0b0000000000000000000000000000000000000000000000001000000000000000 => "a2",
0b0000000000000000000000000000000000000000000000010000000000000000 => "h3",
0b0000000000000000000000000000000000000000000000100000000000000000 => "g3",
0b0000000000000000000000000000000000000000000001000000000000000000 => "f3",
0b0000000000000000000000000000000000000000000010000000000000000000 => "e3",
0b0000000000000000000000000000000000000000000100000000000000000000 => "d3",
0b0000000000000000000000000000000000000000001000000000000000000000 => "c3",
0b0000000000000000000000000000000000000000010000000000000000000000 => "b3",
0b0000000000000000000000000000000000000000100000000000000000000000 => "a3",
0b0000000000000000000000000000000000000001000000000000000000000000 => "h4",
0b0000000000000000000000000000000000000010000000000000000000000000 => "g4",
0b0000000000000000000000000000000000000100000000000000000000000000 => "f4",
0b0000000000000000000000000000000000001000000000000000000000000000 => "e4",
0b0000000000000000000000000000000000010000000000000000000000000000 => "d4",
0b0000000000000000000000000000000000100000000000000000000000000000 => "c4",
0b0000000000000000000000000000000001000000000000000000000000000000 => "b4",
0b0000000000000000000000000000000010000000000000000000000000000000 => "a4",
0b0000000000000000000000000000000100000000000000000000000000000000 => "h5",
0b0000000000000000000000000000001000000000000000000000000000000000 => "g5",
0b0000000000000000000000000000010000000000000000000000000000000000 => "f5",
0b0000000000000000000000000000100000000000000000000000000000000000 => "e5",
0b0000000000000000000000000001000000000000000000000000000000000000 => "d5",
0b0000000000000000000000000010000000000000000000000000000000000000 => "c5",
0b0000000000000000000000000100000000000000000000000000000000000000 => "b5",
0b0000000000000000000000001000000000000000000000000000000000000000 => "a5",
0b0000000000000000000000010000000000000000000000000000000000000000 => "h6",
0b0000000000000000000000100000000000000000000000000000000000000000 => "g6",
0b0000000000000000000001000000000000000000000000000000000000000000 => "f6",
0b0000000000000000000010000000000000000000000000000000000000000000 => "e6",
0b0000000000000000000100000000000000000000000000000000000000000000 => "d6",
0b0000000000000000001000000000000000000000000000000000000000000000 => "c6",
0b0000000000000000010000000000000000000000000000000000000000000000 => "b6",
0b0000000000000000100000000000000000000000000000000000000000000000 => "a6",
0b0000000000000001000000000000000000000000000000000000000000000000 => "h7",
0b0000000000000010000000000000000000000000000000000000000000000000 => "g7",
0b0000000000000100000000000000000000000000000000000000000000000000 => "f7",
0b0000000000001000000000000000000000000000000000000000000000000000 => "e7",
0b0000000000010000000000000000000000000000000000000000000000000000 => "d7",
0b0000000000100000000000000000000000000000000000000000000000000000 => "c7",
0b0000000001000000000000000000000000000000000000000000000000000000 => "b7",
0b0000000010000000000000000000000000000000000000000000000000000000 => "a7",
0b0000000100000000000000000000000000000000000000000000000000000000 => "h8",
0b0000001000000000000000000000000000000000000000000000000000000000 => "g8",
0b0000010000000000000000000000000000000000000000000000000000000000 => "f8",
0b0000100000000000000000000000000000000000000000000000000000000000 => "e8",
0b0001000000000000000000000000000000000000000000000000000000000000 => "d8",
0b0010000000000000000000000000000000000000000000000000000000000000 => "c8",
0b0100000000000000000000000000000000000000000000000000000000000000 => "b8",
0b1000000000000000000000000000000000000000000000000000000000000000 => "a8"
)

# dizionario per passare da bitsquare a indice della casa
BITSQUARES_TO_ID=Dict(
    0b0000000000000000000000000000000000000000000000000000000000000001 => 1,
    0b0000000000000000000000000000000000000000000000000000000000000010 => 2,
    0b0000000000000000000000000000000000000000000000000000000000000100 => 3,
    0b0000000000000000000000000000000000000000000000000000000000001000 => 4,
    0b0000000000000000000000000000000000000000000000000000000000010000 => 5,
    0b0000000000000000000000000000000000000000000000000000000000100000 => 6,
    0b0000000000000000000000000000000000000000000000000000000001000000 => 7,
    0b0000000000000000000000000000000000000000000000000000000010000000 => 8,
    0b0000000000000000000000000000000000000000000000000000000100000000 => 9,
    0b0000000000000000000000000000000000000000000000000000001000000000 => 10,
    0b0000000000000000000000000000000000000000000000000000010000000000 => 11,
    0b0000000000000000000000000000000000000000000000000000100000000000 => 12,
    0b0000000000000000000000000000000000000000000000000001000000000000 => 13,
    0b0000000000000000000000000000000000000000000000000010000000000000 => 14,
    0b0000000000000000000000000000000000000000000000000100000000000000 => 15,
    0b0000000000000000000000000000000000000000000000001000000000000000 => 16,
    0b0000000000000000000000000000000000000000000000010000000000000000 => 17,
    0b0000000000000000000000000000000000000000000000100000000000000000 => 18,
    0b0000000000000000000000000000000000000000000001000000000000000000 => 19,
    0b0000000000000000000000000000000000000000000010000000000000000000 => 20,
    0b0000000000000000000000000000000000000000000100000000000000000000 => 21,
    0b0000000000000000000000000000000000000000001000000000000000000000 => 22,
    0b0000000000000000000000000000000000000000010000000000000000000000 => 23,
    0b0000000000000000000000000000000000000000100000000000000000000000 => 24,
    0b0000000000000000000000000000000000000001000000000000000000000000 => 25,
    0b0000000000000000000000000000000000000010000000000000000000000000 => 26,
    0b0000000000000000000000000000000000000100000000000000000000000000 => 27,
    0b0000000000000000000000000000000000001000000000000000000000000000 => 28,
    0b0000000000000000000000000000000000010000000000000000000000000000 => 29,
    0b0000000000000000000000000000000000100000000000000000000000000000 => 30,
    0b0000000000000000000000000000000001000000000000000000000000000000 => 31,
    0b0000000000000000000000000000000010000000000000000000000000000000 => 32,
    0b0000000000000000000000000000000100000000000000000000000000000000 => 33,
    0b0000000000000000000000000000001000000000000000000000000000000000 => 34,
    0b0000000000000000000000000000010000000000000000000000000000000000 => 35,
    0b0000000000000000000000000000100000000000000000000000000000000000 => 36,
    0b0000000000000000000000000001000000000000000000000000000000000000 => 37,
    0b0000000000000000000000000010000000000000000000000000000000000000 => 38,
    0b0000000000000000000000000100000000000000000000000000000000000000 => 39,
    0b0000000000000000000000001000000000000000000000000000000000000000 => 40,
    0b0000000000000000000000010000000000000000000000000000000000000000 => 41,
    0b0000000000000000000000100000000000000000000000000000000000000000 => 42,
    0b0000000000000000000001000000000000000000000000000000000000000000 => 43,
    0b0000000000000000000010000000000000000000000000000000000000000000 => 44,
    0b0000000000000000000100000000000000000000000000000000000000000000 => 45,
    0b0000000000000000001000000000000000000000000000000000000000000000 => 46,
    0b0000000000000000010000000000000000000000000000000000000000000000 => 47,
    0b0000000000000000100000000000000000000000000000000000000000000000 => 48,
    0b0000000000000001000000000000000000000000000000000000000000000000 => 49,
    0b0000000000000010000000000000000000000000000000000000000000000000 => 50,
    0b0000000000000100000000000000000000000000000000000000000000000000 => 51,
    0b0000000000001000000000000000000000000000000000000000000000000000 => 52,
    0b0000000000010000000000000000000000000000000000000000000000000000 => 53,
    0b0000000000100000000000000000000000000000000000000000000000000000 => 54,
    0b0000000001000000000000000000000000000000000000000000000000000000 => 55,
    0b0000000010000000000000000000000000000000000000000000000000000000 => 56,
    0b0000000100000000000000000000000000000000000000000000000000000000 => 57,
    0b0000001000000000000000000000000000000000000000000000000000000000 => 58,
    0b0000010000000000000000000000000000000000000000000000000000000000 => 59,
    0b0000100000000000000000000000000000000000000000000000000000000000 => 60,
    0b0001000000000000000000000000000000000000000000000000000000000000 => 61,
    0b0010000000000000000000000000000000000000000000000000000000000000 => 62,
    0b0100000000000000000000000000000000000000000000000000000000000000 => 63,
    0b1000000000000000000000000000000000000000000000000000000000000000 => 64
)

"""
Mappe di calore per tutti i pezzi di tutti i colori. Alcune speciali per i pedoni passati e per il re in finale.
"""
# pedoni bianchi
const HM_W_PAWN= Int64[
0,  0,  0,  0,  0,  0,  0,  0,
50, 50, 50, 50, 50, 50, 50, 50,
10, 10, 20, 30, 30, 20, 10, 10,
 5,  5, 10, 25, 25, 10,  5,  5,
 0,  0,  0, 20, 20,  0,  0,  0,
 5, -5,-10,  0,  0,-10, -5,  5,
 5, 10, 10,-20,-20, 10, 10,  5,
 0,  0,  0,  0,  0,  0,  0,  0]

 # pedoni neri
const HM_B_PAWN= Int64[
0,  0,  0,  0,  0,  0,  0,  0,
 5, 10, 10,-20,-20, 10, 10,  5,
 5, -5,-10,  0,  0,-10, -5,  5,
 0,  0,  0, 20, 20,  0,  0,  0,
 5,  5, 10, 25, 25, 10,  5,  5,
 10, 10, 20, 30, 30, 20, 10, 10,
 50, 50, 50, 50, 50, 50, 50, 50,
 0,  0,  0,  0,  0,  0,  0,  0]

 # cavalli bianchi
const HM_W_KNIGHT = Int64[
-50,-40,-30,-30,-30,-30,-40,-50,
-40,-20,  0,  0,  0,  0,-20,-40,
-30,  0, 10, 15, 15, 10,  0,-30,
-30,  5, 15, 20, 20, 15,  5,-30,
-30,  0, 15, 20, 20, 15,  0,-30,
-30,  5, 10, 15, 15, 10,  5,-30,
-40,-20,  0,  5,  5,  0,-20,-40,
-50,-40,-30,-30,-30,-30,-40,-50]

# cavalli neri
const HM_B_KNIGHT = Int64[
-50,-40,-30,-30,-30,-30,-40,-50,
-40,-20,  0,  5,  5,  0,-20,-40,
-30,  5, 10, 15, 15, 10,  5,-30,
-30,  0, 15, 20, 20, 15,  0,-30,
-30,  5, 15, 20, 20, 15,  5,-30,
-30,  0, 10, 15, 15, 10,  0,-30,
-40,-20,  0,  0,  0,  0,-20,-40,
-50,-40,-30,-30,-30,-30,-40,-50]

# alfieri bianchi
 const HM_W_BISHOP= Int64[
-20,-10,-10,-10,-10,-10,-10,-20,
-10,  0,  0,  0,  0,  0,  0,-10,
-10,  0,  5, 10, 10,  5,  0,-10,
-10,  5,  5, 10, 10,  5,  5,-10,
-10,  0, 10, 10, 10, 10,  0,-10,
-10, 10, 10, 10, 10, 10, 10,-10,
-10,  5,  0,  0,  0,  0,  5,-10,
-20,-10,-10,-10,-10,-10,-10,-20]

# alfieri neri
const HM_B_BISHOP= Int64[
-20,-10,-10,-10,-10,-10,-10,-20,
-10,  5,  0,  0,  0,  0,  5,-10,
-10, 10, 10, 10, 10, 10, 10,-10,
-10,  0, 10, 10, 10, 10,  0,-10,
-10,  5,  5, 10, 10,  5,  5,-10,
-10,  0,  5, 10, 10,  5, 0 ,-10,
-10,  0,  0,  0,  0,  0,  0,-10,
-20,-10,-10,-10,-10,-10,-10,-20 
]

# torri bianche
const HM_W_ROOK = Int64[
  0,  0,  0,  0,  0,  0,  0,  0,
  5, 10, 10, 10, 10, 10, 10,  5,
 -5,  0,  0,  0,  0,  0,  0, -5,
 -5,  0,  0,  0,  0,  0,  0, -5,
 -5,  0,  0,  0,  0,  0,  0, -5,
 -5,  0,  0,  0,  0,  0,  0, -5,
 -5,  0,  0,  0,  0,  0,  0, -5,
  -10,  0,  0,  10,  10, 0,  0,  -10
]

# torri nere
const HM_B_ROOK = Int64[
  -10,  0,  0,  10,  10,  0,  0,  -10,
 -5,  0,  0,  0,  0,  0,  0, -5,
 -5,  0,  0,  0,  0,  0,  0, -5,
 -5,  0,  0,  0,  0,  0,  0, -5,
 -5,  0,  0,  0,  0,  0,  0, -5,
 -5,  0,  0,  0,  0,  0,  0, -5,
  5, 10, 10, 10, 10, 10, 10,  5,
  0,  0,  0,  0,  0,  0,  0,  0
]

# regine bianche
const HM_W_QUEEN = Int64[
-20,-10,-10, -5, -5,-10,-10,-20,
-10,  0,  0,  0,  0,  0,  0,-10,
-10,  0,  5,  5,  5,  5,  0,-10,
 -5,  0,  5,  5,  5,  5,  0, -5,
  0,  0,  5,  5,  5,  5,  0, -5,
-10,  5,  5,  5,  5,  5,  0,-10,
-10,  0,  5,  0,  0,  0,  0,-10,
-20,-10,-10, -5, -5,-10,-10,-20
]

# regine nere
const HM_B_QUEEN = Int64[
-20,-10,-10, -5, -5,-10,-10,-20,
-10,  0,  5,  0,  0,  0,  0,-10,
-10,  5,  5,  5,  5,  5,  0,-10,
  0,  0,  5,  5,  5,  5,  0, -5,
 -5,  0,  5,  5,  5,  5,  0, -5,
-10,  0,  5,  5,  5,  5,  0,-10,
-10,  0,  0,  0,  0,  0,  0,-10,
-20,-10,-10, -5, -5,-10,-10,-20
]

# re bianco
const HM_W_KING = Int64[
-30,-40,-40,-50,-50,-40,-40,-30,
-30,-40,-40,-50,-50,-40,-40,-30,
-30,-40,-40,-50,-50,-40,-40,-30,
-30,-40,-40,-50,-50,-40,-40,-30,
-20,-30,-30,-40,-40,-30,-30,-20,
-10,-20,-20,-20,-20,-20,-20,-10,
 20, 20,  0,  0,  0,  0, 20, 20,
 10, 30, 20,  -10,  0, -10, 30, 10
]

# re nero
const HM_B_KING = Int64[
 10, 30, 20,  -10,  0, -10, 30, 10,
 20, 20,  0,  0,  0,  0, 20, 20,
-10,-20,-20,-20,-20,-20,-20,-10,
-20,-30,-30,-40,-40,-30,-30,-20,
-30,-40,-40,-50,-50,-40,-40,-30,
-30,-40,-40,-50,-50,-40,-40,-30,
-30,-40,-40,-50,-50,-40,-40,-30,
-30,-40,-40,-50,-50,-40,-40,-30
]

# re bianco, finale di gioco
const HM_W_KING_ENDGAME = Int64[
-90,-50,-30,-20,-20,-30,-50,-90,
-50,-20,-10,  0,  0,-10,-20,-50,
-30,-10, 20, 30, 30, 20,-10,-30,
-30,-10, 30, 40, 40, 30,-10,-30,
-30,-10, 30, 40, 40, 30,-10,-30,
-30,-10, 20, 30, 30, 20,-10,-30,
-50,-30,  0,  0,  0,  0,-30,-50,
-90,-50,-30,-30,-30,-30,-50,-90
]

# re nero, finale di gioco
const HM_B_KING_ENDGAME = Int64[
-90,-50,-30,-30,-30,-30,-50,-90,
-50,-30,  0,  0,  0,  0,-30,-50,
-30,-10, 20, 30, 30, 20,-10,-30,
-30,-10, 30, 40, 40, 30,-10,-30,
-30,-10, 30, 40, 40, 30,-10,-30,
-30,-10, 20, 30, 30, 20,-10,-30,
-50,-20,-10,  0,  0,-10,-20,-50,
-90,-50,-30,-20,-20,-30,-50,-90
]

# pedoni bianchi passati
const HM_W_PP = Int64[
0,   0,   0,   0,   0,   0,   0,   0,
160, 150, 150, 150, 150, 150, 150, 160,
100, 80,  80,  80,  80,  80,  80,  100,
60,  50,  50,  50,  50,  50,  50,  60,
40,  30,  30,  30,  30,  30,  30,  40,
20,  20,  20,  20,  20,  20,  20,  20,
5,   5,   5,   5,   5,   5,   5,   5,
0,   0,   0,   0,   0,   0,   0,   0
]

# pedoni neri passati
const HM_B_PP = Int64[
0,   0,   0,   0,   0,   0,   0,   0,
5,   5,   5,   5,   5,   5,   5,   5,
20,  20,  20,  20,  20,  20,  20,  20,
40,  30,  30,  30,  30,  30,  30,  40,
60,  50,  50,  50,  50,  50,  50,  60,
100, 80,  80,  80,  80,  80,  80,  100,
160, 150, 150, 150, 150, 150, 150, 160,
0,   0,   0,   0,   0,   0,   0,   0
]

# funzione che serve a specchiare le mappe di calore introdotte, perché gli indici utilizzati per le case sono invertiti
function flip_table!(table::Vector{Int64})
    @assert length(table) == 64
    for i in 1:32
        table[i], table[65 - i] = table[65 - i], table[i]
    end
end

flip_table!(HM_W_PAWN)
flip_table!(HM_B_PAWN)
flip_table!(HM_W_KNIGHT)
flip_table!(HM_B_KNIGHT)
flip_table!(HM_W_BISHOP)
flip_table!(HM_B_BISHOP)
flip_table!(HM_W_ROOK)
flip_table!(HM_B_ROOK)
flip_table!(HM_W_QUEEN)
flip_table!(HM_B_QUEEN)
flip_table!(HM_W_KING)
flip_table!(HM_B_KING)
flip_table!(HM_W_KING_ENDGAME)
flip_table!(HM_B_KING_ENDGAME)
flip_table!(HM_W_PP)
flip_table!(HM_B_PP)

# dagli indici alla notazione delle case
ID_TO_NOTATION=[
"h1","g1","f1","e1","d1","c1","b1","a1",
"h2","g2","f2","e2","d2","c2","b2","a2",
"h3","g3","f3","e3","d3","c3","b3","a3",
"h4","g4","f4","e4","d4","c4","b4","a4",
"h5","g5","f5","e5","d5","c5","b5","a5",
"h6","g6","f6","e6","d6","c6","b6","a6",
"h7","g7","f7","e7","d7","c7","b7","a7",
"h8","g8","f8","e8","d8","c8","b8","a8"
]

# dalle notazioni delle case agli indici
NOTATION_TO_ID = Dict(
"h1" => 1,
"g1" => 2,
"f1" => 3,
"e1" => 4,
"d1" => 5,
"c1" => 6,
"b1" => 7,
"a1" => 8,
"h2" => 9,
"g2" => 10,
"f2" => 11,
"e2" => 12,
"d2" => 13,
"c2" => 14,
"b2" => 15,
"a2" => 16,
"h3" => 17,
"g3" => 18,
"f3" => 19,
"e3" => 20,
"d3" => 21,
"c3" => 22,
"b3" => 23,
"a3" => 24,
"h4" => 25,
"g4" => 26,
"f4" => 27,
"e4" => 28,
"d4" => 29,
"c4" => 30,
"b4" => 31,
"a4" => 32,
"h5" => 33,
"g5" => 34,
"f5" => 35,
"e5" => 36,
"d5" => 37,
"c5" => 38,
"b5" => 39,
"a5" => 40,
"h6" => 41,
"g6" => 42,
"f6" => 43,
"e6" => 44,
"d6" => 45,
"c6" => 46,
"b6" => 47,
"a6" => 48,
"h7" => 49,
"g7" => 50,
"f7" => 51,
"e7" => 52,
"d7" => 53,
"c7" => 54,
"b7" => 55,
"a7" => 56,
"h8" => 57,
"g8" => 58,
"f8" => 59,
"e8" => 60,
"d8" => 61,
"c8" => 62,
"b8" => 63,
"a8" => 64)

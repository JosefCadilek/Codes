"""
File containing datas
Containing functions managing the data
"""

export RANKS, FILES, DIAGONALS, ANTI_DIAGONALS, SQUARES_TO_BITBOARDS, BITSQUARES_TO_COORDINATES, BITSQUARES_TO_DAD, BITSQUARES_TO_ID, BITSQUARES_TO_NOTATION, bitBoardsfromFEN, setBitBoardsFromFEN

##################################
#TODO list
# 1) getFENfromBitBoards -> takes bitBitboards and gamestate and returns a fen string associated with them.
##################################




"""
    Takes a FEN string as input and outputs bitBoards, bittyBoards with gameState
    //TODO: Check and move counter
"""
function bitBoardsfromFEN(fen::String)
    # empty bitboards
    white_king  = 0x0000000000000000
    white_queens  = 0x0000000000000000
    white_bishops = 0x0000000000000000
    white_knights = 0x0000000000000000
    white_rooks = 0x0000000000000000
    white_pawns = 0x0000000000000000
    black_king = 0x0000000000000000
    black_queens = 0x0000000000000000
    black_bishops = 0x0000000000000000
    black_knights = 0x0000000000000000
    black_rooks  = 0x0000000000000000
    black_pawns = 0x0000000000000000
    EP = 0x0000000000000000
    playing_turn = false;
    b_cast_king=false;
    b_cast_queen=false;
    w_cast_king=false;
    w_cast_queen=false;
    # split FEN in pieces
    fenPieces = split(fen, r"\s+");
    count = 0; # counter from 1 to 63

    #create bitboards
    for letter in fenPieces[1]
        # Create A8 square and shift
        square=0b1000000000000000000000000000000000000000000000000000000000000000 >> count;
        if(letter >= '1' && letter <='8')
            count+=letter-'0';
            continue;
        elseif(letter == '/')
            continue;
        else
        if(letter=='k')
            black_king=square;
            count+=1;
            continue;
        end
        if(letter=='q')
            black_queens=black_queens|square;
            count+=1;
            continue;
        end
        if(letter=='b')
            black_bishops=black_bishops|square;
            count+=1;
            continue;
        end
        if(letter=='n')
            black_knights=black_knights|square;
            count+=1;
            continue;
        end
        if(letter=='r')
            black_rooks=black_rooks|square;
            count+=1;
            continue;
        end
        if(letter=='p')
            black_pawns=black_pawns|square;
            count+=1;
            continue;
        end

        if(letter=='K')
            white_king=square;
            count+=1;
            continue;
        end
        if(letter=='Q')
            white_queens=white_queens|square;
            count+=1;
            continue;
        end
        if(letter=='B')
            white_bishops=white_bishops|square;
            count+=1;
            continue;
        end
        if(letter=='N')
            white_knights=white_knights|square;
            count+=1;
            continue;
        end
        if(letter=='R')
            white_rooks=white_rooks|square;
            count+=1;
            continue;
        end
        if(letter=='P')
            white_pawns=white_pawns|square;
            count+=1;
            continue;
        end
    end
end

if (occursin('w', fenPieces[2]))
    playing_turn=true
else
    playing_turn=false
end

if (occursin('k', fenPieces[3]))
    b_cast_king=true
end
if(occursin('q', fenPieces[3]))
    b_cast_queen=true
end
if (occursin('K', fenPieces[3]))
    w_cast_king=true
end
if (occursin('Q', fenPieces[3]))
    w_cast_queen=true
end

if(!occursin('-', fenPieces[4]))
    EP = get(SQUARES_TO_BITBOARDS, fenPieces[4], 0x0000000000000000)
    printBitBoard(EP)
end
    return [white_king, white_queens, white_bishops, white_knights, white_rooks, white_pawns, black_king, black_queens, black_bishops, black_knights, black_rooks, black_pawns], [true, playing_turn, false, false, w_cast_king, w_cast_queen, b_cast_king, b_cast_queen, false], [EP];
end


"""
Sets bitboards and gamestate from a FEN string
"""
function setBitBoardsFromFEN(fen::String)
    newValues = bitBoardsfromFEN(fen)
    bitBoards .= newValues[1]
    gameState .= newValues[2]
    bittyBoards .= newValues[3]
end

RANKS = [0xff, 0xff00, 0xff0000,
0xff000000, 0xff00000000, 0xff0000000000,
0xff000000000000, 0xff00000000000000];

FILES = [0x8080808080808080, 0x4040404040404040,
0x2020202020202020, 0x1010101010101010,
0x0808080808080808, 0x0404040404040404,
0x0202020202020202, 0x0101010101010101];

    #Diagonals -> #15
    DIAGONALS = [0x1, 0x102, 0x10204, 0x1020408, 0x102040810,
    0x10204081020, 0x1020408102040,
    0x102040810204080, 0x204081020408000,
    0x408102040800000, 0x810204080000000,
    0x1020408000000000, 0x2040800000000000,
    0x4080000000000000, 0x8000000000000000];

    #AntiDiagonals -> #15
    ANTI_DIAGONALS = [0x80, 0x8040, 0x804020, 0x80402010, 0x8040201008,
    0x804020100804, 0x80402010080402,
    0x8040201008040201, 0x4020100804020100,
    0x2010080402010000, 0x1008040201000000,
    0x804020100000000, 0x402010000000000,
    0x201000000000000, 0x100000000000000];

# Giant dictionary that translates IDs and coordinates into SquareBitBoards
# Useful for future translation, if needed from bits to arrays.
SQUARES_TO_BITBOARDS = Dict(
1 => 0b0000000000000000000000000000000000000000000000000000000000000001,
2 => 0b0000000000000000000000000000000000000000000000000000000000000010,
3 => 0b0000000000000000000000000000000000000000000000000000000000000100,
4 => 0b0000000000000000000000000000000000000000000000000000000000001000,
5 => 0b0000000000000000000000000000000000000000000000000000000000010000,
6 => 0b0000000000000000000000000000000000000000000000000000000000100000,
7 => 0b0000000000000000000000000000000000000000000000000000000001000000,
8 => 0b0000000000000000000000000000000000000000000000000000000010000000,
9 => 0b0000000000000000000000000000000000000000000000000000000100000000,
10 => 0b0000000000000000000000000000000000000000000000000000001000000000,
11 => 0b0000000000000000000000000000000000000000000000000000010000000000,
12 => 0b0000000000000000000000000000000000000000000000000000100000000000,
13 => 0b0000000000000000000000000000000000000000000000000001000000000000,
14 => 0b0000000000000000000000000000000000000000000000000010000000000000,
15 => 0b0000000000000000000000000000000000000000000000000100000000000000,
16 => 0b0000000000000000000000000000000000000000000000001000000000000000,
17 => 0b0000000000000000000000000000000000000000000000010000000000000000,
18 => 0b0000000000000000000000000000000000000000000000100000000000000000,
19 => 0b0000000000000000000000000000000000000000000001000000000000000000,
20 => 0b0000000000000000000000000000000000000000000010000000000000000000,
21 => 0b0000000000000000000000000000000000000000000100000000000000000000,
22 => 0b0000000000000000000000000000000000000000001000000000000000000000,
23 => 0b0000000000000000000000000000000000000000010000000000000000000000,
24 => 0b0000000000000000000000000000000000000000100000000000000000000000,
25 => 0b0000000000000000000000000000000000000001000000000000000000000000,
26 => 0b0000000000000000000000000000000000000010000000000000000000000000,
27 => 0b0000000000000000000000000000000000000100000000000000000000000000,
28 => 0b0000000000000000000000000000000000001000000000000000000000000000,
29 => 0b0000000000000000000000000000000000010000000000000000000000000000,
30 => 0b0000000000000000000000000000000000100000000000000000000000000000,
31 => 0b0000000000000000000000000000000001000000000000000000000000000000,
32 => 0b0000000000000000000000000000000010000000000000000000000000000000,
33 => 0b0000000000000000000000000000000100000000000000000000000000000000,
34 => 0b0000000000000000000000000000001000000000000000000000000000000000,
35 => 0b0000000000000000000000000000010000000000000000000000000000000000,
36 => 0b0000000000000000000000000000100000000000000000000000000000000000,
37 => 0b0000000000000000000000000001000000000000000000000000000000000000,
38 => 0b0000000000000000000000000010000000000000000000000000000000000000,
39 => 0b0000000000000000000000000100000000000000000000000000000000000000,
40 => 0b0000000000000000000000001000000000000000000000000000000000000000,
41 => 0b0000000000000000000000010000000000000000000000000000000000000000,
42 => 0b0000000000000000000000100000000000000000000000000000000000000000,
43 => 0b0000000000000000000001000000000000000000000000000000000000000000,
44 => 0b0000000000000000000010000000000000000000000000000000000000000000,
45 => 0b0000000000000000000100000000000000000000000000000000000000000000,
46 => 0b0000000000000000001000000000000000000000000000000000000000000000,
47 => 0b0000000000000000010000000000000000000000000000000000000000000000,
48 => 0b0000000000000000100000000000000000000000000000000000000000000000,
49 => 0b0000000000000001000000000000000000000000000000000000000000000000,
50 => 0b0000000000000010000000000000000000000000000000000000000000000000,
51 => 0b0000000000000100000000000000000000000000000000000000000000000000,
52 => 0b0000000000001000000000000000000000000000000000000000000000000000,
53 => 0b0000000000010000000000000000000000000000000000000000000000000000,
54 => 0b0000000000100000000000000000000000000000000000000000000000000000,
55 => 0b0000000001000000000000000000000000000000000000000000000000000000,
56 => 0b0000000010000000000000000000000000000000000000000000000000000000,
57 => 0b0000000100000000000000000000000000000000000000000000000000000000,
58 => 0b0000001000000000000000000000000000000000000000000000000000000000,
59 => 0b0000010000000000000000000000000000000000000000000000000000000000,
60 => 0b0000100000000000000000000000000000000000000000000000000000000000,
61 => 0b0001000000000000000000000000000000000000000000000000000000000000,
62 => 0b0010000000000000000000000000000000000000000000000000000000000000,
63 => 0b0100000000000000000000000000000000000000000000000000000000000000,
64 => 0b1000000000000000000000000000000000000000000000000000000000000000,
"h1" => 0b0000000000000000000000000000000000000000000000000000000000000001,
"g1" => 0b0000000000000000000000000000000000000000000000000000000000000010,
"f1" => 0b0000000000000000000000000000000000000000000000000000000000000100,
"e1" => 0b0000000000000000000000000000000000000000000000000000000000001000,
"d1" => 0b0000000000000000000000000000000000000000000000000000000000010000,
"c1" => 0b0000000000000000000000000000000000000000000000000000000000100000,
"b1" => 0b0000000000000000000000000000000000000000000000000000000001000000,
"a1" => 0b0000000000000000000000000000000000000000000000000000000010000000,
"h2" => 0b0000000000000000000000000000000000000000000000000000000100000000,
"g2" => 0b0000000000000000000000000000000000000000000000000000001000000000,
"f2" => 0b0000000000000000000000000000000000000000000000000000010000000000,
"e2" => 0b0000000000000000000000000000000000000000000000000000100000000000,
"d2" => 0b0000000000000000000000000000000000000000000000000001000000000000,
"c2" => 0b0000000000000000000000000000000000000000000000000010000000000000,
"b2" => 0b0000000000000000000000000000000000000000000000000100000000000000,
"a2" => 0b0000000000000000000000000000000000000000000000001000000000000000,
"h3" => 0b0000000000000000000000000000000000000000000000010000000000000000,
"g3" => 0b0000000000000000000000000000000000000000000000100000000000000000,
"f3" => 0b0000000000000000000000000000000000000000000001000000000000000000,
"e3" => 0b0000000000000000000000000000000000000000000010000000000000000000,
"d3" => 0b0000000000000000000000000000000000000000000100000000000000000000,
"c3" => 0b0000000000000000000000000000000000000000001000000000000000000000,
"b3" => 0b0000000000000000000000000000000000000000010000000000000000000000,
"a3" => 0b0000000000000000000000000000000000000000100000000000000000000000,
"h4" => 0b0000000000000000000000000000000000000001000000000000000000000000,
"g4" => 0b0000000000000000000000000000000000000010000000000000000000000000,
"f4" => 0b0000000000000000000000000000000000000100000000000000000000000000,
"e4" => 0b0000000000000000000000000000000000001000000000000000000000000000,
"d4" => 0b0000000000000000000000000000000000010000000000000000000000000000,
"c4" => 0b0000000000000000000000000000000000100000000000000000000000000000,
"b4" => 0b0000000000000000000000000000000001000000000000000000000000000000,
"a4" => 0b0000000000000000000000000000000010000000000000000000000000000000,
"h5" => 0b0000000000000000000000000000000100000000000000000000000000000000,
"g5" => 0b0000000000000000000000000000001000000000000000000000000000000000,
"f5" => 0b0000000000000000000000000000010000000000000000000000000000000000,
"e5" => 0b0000000000000000000000000000100000000000000000000000000000000000,
"d5" => 0b0000000000000000000000000001000000000000000000000000000000000000,
"c5" => 0b0000000000000000000000000010000000000000000000000000000000000000,
"b5" => 0b0000000000000000000000000100000000000000000000000000000000000000,
"a5" => 0b0000000000000000000000001000000000000000000000000000000000000000,
"h6" => 0b0000000000000000000000010000000000000000000000000000000000000000,
"g6" => 0b0000000000000000000000100000000000000000000000000000000000000000,
"f6" => 0b0000000000000000000001000000000000000000000000000000000000000000,
"e6" => 0b0000000000000000000010000000000000000000000000000000000000000000,
"d6" => 0b0000000000000000000100000000000000000000000000000000000000000000,
"c6" => 0b0000000000000000001000000000000000000000000000000000000000000000,
"b6" => 0b0000000000000000010000000000000000000000000000000000000000000000,
"a6" => 0b0000000000000000100000000000000000000000000000000000000000000000,
"h7" => 0b0000000000000001000000000000000000000000000000000000000000000000,
"g7" => 0b0000000000000010000000000000000000000000000000000000000000000000,
"f7" => 0b0000000000000100000000000000000000000000000000000000000000000000,
"e7" => 0b0000000000001000000000000000000000000000000000000000000000000000,
"d7" => 0b0000000000010000000000000000000000000000000000000000000000000000,
"c7" => 0b0000000000100000000000000000000000000000000000000000000000000000,
"b7" => 0b0000000001000000000000000000000000000000000000000000000000000000,
"a7" => 0b0000000010000000000000000000000000000000000000000000000000000000,
"h8" => 0b0000000100000000000000000000000000000000000000000000000000000000,
"g8" => 0b0000001000000000000000000000000000000000000000000000000000000000,
"f8" => 0b0000010000000000000000000000000000000000000000000000000000000000,
"e8" => 0b0000100000000000000000000000000000000000000000000000000000000000,
"d8" => 0b0001000000000000000000000000000000000000000000000000000000000000,
"c8" => 0b0010000000000000000000000000000000000000000000000000000000000000,
"b8" => 0b0100000000000000000000000000000000000000000000000000000000000000,
"a8" => 0b1000000000000000000000000000000000000000000000000000000000000000)


# Dictionary for ranks and files number, starting from bitSquare
BITSQUARES_TO_COORDINATES=Dict(
0b0000000000000000000000000000000000000000000000000000000000000001 => (1, 8),
0b0000000000000000000000000000000000000000000000000000000000000010 => (1, 7),
0b0000000000000000000000000000000000000000000000000000000000000100 => (1, 6),
0b0000000000000000000000000000000000000000000000000000000000001000 => (1, 5),
0b0000000000000000000000000000000000000000000000000000000000010000 => (1, 4),
0b0000000000000000000000000000000000000000000000000000000000100000 => (1, 3),
0b0000000000000000000000000000000000000000000000000000000001000000 => (1, 2),
0b0000000000000000000000000000000000000000000000000000000010000000 => (1, 1),
0b0000000000000000000000000000000000000000000000000000000100000000 => (2, 8),
0b0000000000000000000000000000000000000000000000000000001000000000 => (2, 7),
0b0000000000000000000000000000000000000000000000000000010000000000 => (2, 6),
0b0000000000000000000000000000000000000000000000000000100000000000 => (2, 5),
0b0000000000000000000000000000000000000000000000000001000000000000 => (2, 4),
0b0000000000000000000000000000000000000000000000000010000000000000 => (2, 3),
0b0000000000000000000000000000000000000000000000000100000000000000 => (2, 2),
0b0000000000000000000000000000000000000000000000001000000000000000 => (2, 1),
0b0000000000000000000000000000000000000000000000010000000000000000 => (3, 8),
0b0000000000000000000000000000000000000000000000100000000000000000 => (3, 7),
0b0000000000000000000000000000000000000000000001000000000000000000 => (3, 6),
0b0000000000000000000000000000000000000000000010000000000000000000 => (3, 5),
0b0000000000000000000000000000000000000000000100000000000000000000 => (3, 4),
0b0000000000000000000000000000000000000000001000000000000000000000 => (3, 3),
0b0000000000000000000000000000000000000000010000000000000000000000 => (3, 2),
0b0000000000000000000000000000000000000000100000000000000000000000 => (3, 1),
0b0000000000000000000000000000000000000001000000000000000000000000 => (4, 8),
0b0000000000000000000000000000000000000010000000000000000000000000 => (4, 7),
0b0000000000000000000000000000000000000100000000000000000000000000 => (4, 6),
0b0000000000000000000000000000000000001000000000000000000000000000 => (4, 5),
0b0000000000000000000000000000000000010000000000000000000000000000 => (4, 4),
0b0000000000000000000000000000000000100000000000000000000000000000 => (4, 3),
0b0000000000000000000000000000000001000000000000000000000000000000 => (4, 2),
0b0000000000000000000000000000000010000000000000000000000000000000 => (4, 1),
0b0000000000000000000000000000000100000000000000000000000000000000 => (5, 8),
0b0000000000000000000000000000001000000000000000000000000000000000 => (5, 7),
0b0000000000000000000000000000010000000000000000000000000000000000 => (5, 6),
0b0000000000000000000000000000100000000000000000000000000000000000 => (5, 5),
0b0000000000000000000000000001000000000000000000000000000000000000 => (5, 4),
0b0000000000000000000000000010000000000000000000000000000000000000 => (5, 3),
0b0000000000000000000000000100000000000000000000000000000000000000 => (5, 2),
0b0000000000000000000000001000000000000000000000000000000000000000 => (5, 1),
0b0000000000000000000000010000000000000000000000000000000000000000 => (6, 8),
0b0000000000000000000000100000000000000000000000000000000000000000 => (6, 7),
0b0000000000000000000001000000000000000000000000000000000000000000 => (6, 6),
0b0000000000000000000010000000000000000000000000000000000000000000 => (6, 5),
0b0000000000000000000100000000000000000000000000000000000000000000 => (6, 4),
0b0000000000000000001000000000000000000000000000000000000000000000 => (6, 3),
0b0000000000000000010000000000000000000000000000000000000000000000 => (6, 2),
0b0000000000000000100000000000000000000000000000000000000000000000 => (6, 1),
0b0000000000000001000000000000000000000000000000000000000000000000 => (7, 8),
0b0000000000000010000000000000000000000000000000000000000000000000 => (7, 7),
0b0000000000000100000000000000000000000000000000000000000000000000 => (7, 6),
0b0000000000001000000000000000000000000000000000000000000000000000 => (7, 5),
0b0000000000010000000000000000000000000000000000000000000000000000 => (7, 4),
0b0000000000100000000000000000000000000000000000000000000000000000 => (7, 3),
0b0000000001000000000000000000000000000000000000000000000000000000 => (7, 2),
0b0000000010000000000000000000000000000000000000000000000000000000 => (7, 1),
0b0000000100000000000000000000000000000000000000000000000000000000 => (8, 8),
0b0000001000000000000000000000000000000000000000000000000000000000 => (8, 7),
0b0000010000000000000000000000000000000000000000000000000000000000 => (8, 6),
0b0000100000000000000000000000000000000000000000000000000000000000 => (8, 5),
0b0001000000000000000000000000000000000000000000000000000000000000 => (8, 4),
0b0010000000000000000000000000000000000000000000000000000000000000 => (8, 3),
0b0100000000000000000000000000000000000000000000000000000000000000 => (8, 2),
0b1000000000000000000000000000000000000000000000000000000000000000 => (8, 1)
)

# Dictionary for Diagonals and antidiagonals, starting from bitSquare
BITSQUARES_TO_DAD=Dict(
    0b0000000000000000000000000000000000000000000000000000000000000001 => (1, 8),
    0b0000000000000000000000000000000000000000000000000000000000000010 => (2, 7),
    0b0000000000000000000000000000000000000000000000000000000000000100 => (3, 6),
    0b0000000000000000000000000000000000000000000000000000000000001000 => (4, 5),
    0b0000000000000000000000000000000000000000000000000000000000010000 => (5, 4),
    0b0000000000000000000000000000000000000000000000000000000000100000 => (6, 3),
    0b0000000000000000000000000000000000000000000000000000000001000000 => (7, 2),
    0b0000000000000000000000000000000000000000000000000000000010000000 => (8, 1),
    0b0000000000000000000000000000000000000000000000000000000100000000 => (2, 9),
    0b0000000000000000000000000000000000000000000000000000001000000000 => (3, 8),
    0b0000000000000000000000000000000000000000000000000000010000000000 => (4, 7),
    0b0000000000000000000000000000000000000000000000000000100000000000 => (5, 6),
    0b0000000000000000000000000000000000000000000000000001000000000000 => (6, 5),
    0b0000000000000000000000000000000000000000000000000010000000000000 => (7, 4),
    0b0000000000000000000000000000000000000000000000000100000000000000 => (8, 3),
    0b0000000000000000000000000000000000000000000000001000000000000000 => (9, 2),
    0b0000000000000000000000000000000000000000000000010000000000000000 => (3, 10),
    0b0000000000000000000000000000000000000000000000100000000000000000 => (4, 9),
    0b0000000000000000000000000000000000000000000001000000000000000000 => (5, 8),
    0b0000000000000000000000000000000000000000000010000000000000000000 => (6, 7),
    0b0000000000000000000000000000000000000000000100000000000000000000 => (7, 6),
    0b0000000000000000000000000000000000000000001000000000000000000000 => (8, 5),
    0b0000000000000000000000000000000000000000010000000000000000000000 => (9, 4),
    0b0000000000000000000000000000000000000000100000000000000000000000 => (10, 3),
    0b0000000000000000000000000000000000000001000000000000000000000000 => (4, 11),
    0b0000000000000000000000000000000000000010000000000000000000000000 => (5, 10),
    0b0000000000000000000000000000000000000100000000000000000000000000 => (6, 9),
    0b0000000000000000000000000000000000001000000000000000000000000000 => (7, 8),
    0b0000000000000000000000000000000000010000000000000000000000000000 => (8, 7),
    0b0000000000000000000000000000000000100000000000000000000000000000 => (9, 6),
    0b0000000000000000000000000000000001000000000000000000000000000000 => (10, 5),
    0b0000000000000000000000000000000010000000000000000000000000000000 => (11, 4),
    0b0000000000000000000000000000000100000000000000000000000000000000 => (5, 12),
    0b0000000000000000000000000000001000000000000000000000000000000000 => (6, 11),
    0b0000000000000000000000000000010000000000000000000000000000000000 => (7, 10),
    0b0000000000000000000000000000100000000000000000000000000000000000 => (8, 9),
    0b0000000000000000000000000001000000000000000000000000000000000000 => (9, 8),
    0b0000000000000000000000000010000000000000000000000000000000000000 => (10, 7),
    0b0000000000000000000000000100000000000000000000000000000000000000 => (11, 6),
    0b0000000000000000000000001000000000000000000000000000000000000000 => (12, 5),
    0b0000000000000000000000010000000000000000000000000000000000000000 => (6, 13),
    0b0000000000000000000000100000000000000000000000000000000000000000 => (7, 12),
    0b0000000000000000000001000000000000000000000000000000000000000000 => (8, 11),
    0b0000000000000000000010000000000000000000000000000000000000000000 => (9, 10),
    0b0000000000000000000100000000000000000000000000000000000000000000 => (10, 9),
    0b0000000000000000001000000000000000000000000000000000000000000000 => (11, 8),
    0b0000000000000000010000000000000000000000000000000000000000000000 => (12, 7),
    0b0000000000000000100000000000000000000000000000000000000000000000 => (13, 6),
    0b0000000000000001000000000000000000000000000000000000000000000000 => (7, 14),
    0b0000000000000010000000000000000000000000000000000000000000000000 => (8, 13),
    0b0000000000000100000000000000000000000000000000000000000000000000 => (9, 12),
    0b0000000000001000000000000000000000000000000000000000000000000000 => (10, 11),
    0b0000000000010000000000000000000000000000000000000000000000000000 => (11, 10),
    0b0000000000100000000000000000000000000000000000000000000000000000 => (12, 9),
    0b0000000001000000000000000000000000000000000000000000000000000000 => (13, 8),
    0b0000000010000000000000000000000000000000000000000000000000000000 => (14, 7),
    0b0000000100000000000000000000000000000000000000000000000000000000 => (8, 15),
    0b0000001000000000000000000000000000000000000000000000000000000000 => (9, 14),
    0b0000010000000000000000000000000000000000000000000000000000000000 => (10, 13),
    0b0000100000000000000000000000000000000000000000000000000000000000 => (11, 12),
    0b0001000000000000000000000000000000000000000000000000000000000000 => (12, 11),
    0b0010000000000000000000000000000000000000000000000000000000000000 => (13, 10),
    0b0100000000000000000000000000000000000000000000000000000000000000 => (14, 9),
    0b1000000000000000000000000000000000000000000000000000000000000000 => (15, 8)
)



# Dictionary normal notation, starting from bitSquare
BITSQUARES_TO_NOTATION=Dict(
0b0000000000000000000000000000000000000000000000000000000000000001 => "h1",
0b0000000000000000000000000000000000000000000000000000000000000010 => "g1",
0b0000000000000000000000000000000000000000000000000000000000000100 => "f1",
0b0000000000000000000000000000000000000000000000000000000000001000 => "e1",
0b0000000000000000000000000000000000000000000000000000000000010000 => "d1",
0b0000000000000000000000000000000000000000000000000000000000100000 => "c1",
0b0000000000000000000000000000000000000000000000000000000001000000 => "b1",
0b0000000000000000000000000000000000000000000000000000000010000000 => "a1",
0b0000000000000000000000000000000000000000000000000000000100000000 => "h2",
0b0000000000000000000000000000000000000000000000000000001000000000 => "g2",
0b0000000000000000000000000000000000000000000000000000010000000000 => "f2",
0b0000000000000000000000000000000000000000000000000000100000000000 => "e2",
0b0000000000000000000000000000000000000000000000000001000000000000 => "d2",
0b0000000000000000000000000000000000000000000000000010000000000000 => "c2",
0b0000000000000000000000000000000000000000000000000100000000000000 => "b2",
0b0000000000000000000000000000000000000000000000001000000000000000 => "a2",
0b0000000000000000000000000000000000000000000000010000000000000000 => "h3",
0b0000000000000000000000000000000000000000000000100000000000000000 => "g3",
0b0000000000000000000000000000000000000000000001000000000000000000 => "f3",
0b0000000000000000000000000000000000000000000010000000000000000000 => "e3",
0b0000000000000000000000000000000000000000000100000000000000000000 => "d3",
0b0000000000000000000000000000000000000000001000000000000000000000 => "c3",
0b0000000000000000000000000000000000000000010000000000000000000000 => "b3",
0b0000000000000000000000000000000000000000100000000000000000000000 => "a3",
0b0000000000000000000000000000000000000001000000000000000000000000 => "h4",
0b0000000000000000000000000000000000000010000000000000000000000000 => "g4",
0b0000000000000000000000000000000000000100000000000000000000000000 => "f4",
0b0000000000000000000000000000000000001000000000000000000000000000 => "e4",
0b0000000000000000000000000000000000010000000000000000000000000000 => "d4",
0b0000000000000000000000000000000000100000000000000000000000000000 => "c4",
0b0000000000000000000000000000000001000000000000000000000000000000 => "b4",
0b0000000000000000000000000000000010000000000000000000000000000000 => "a4",
0b0000000000000000000000000000000100000000000000000000000000000000 => "h5",
0b0000000000000000000000000000001000000000000000000000000000000000 => "g5",
0b0000000000000000000000000000010000000000000000000000000000000000 => "f5",
0b0000000000000000000000000000100000000000000000000000000000000000 => "e5",
0b0000000000000000000000000001000000000000000000000000000000000000 => "d5",
0b0000000000000000000000000010000000000000000000000000000000000000 => "c5",
0b0000000000000000000000000100000000000000000000000000000000000000 => "b5",
0b0000000000000000000000001000000000000000000000000000000000000000 => "a5",
0b0000000000000000000000010000000000000000000000000000000000000000 => "h6",
0b0000000000000000000000100000000000000000000000000000000000000000 => "g6",
0b0000000000000000000001000000000000000000000000000000000000000000 => "f6",
0b0000000000000000000010000000000000000000000000000000000000000000 => "e6",
0b0000000000000000000100000000000000000000000000000000000000000000 => "d6",
0b0000000000000000001000000000000000000000000000000000000000000000 => "c6",
0b0000000000000000010000000000000000000000000000000000000000000000 => "b6",
0b0000000000000000100000000000000000000000000000000000000000000000 => "a6",
0b0000000000000001000000000000000000000000000000000000000000000000 => "h7",
0b0000000000000010000000000000000000000000000000000000000000000000 => "g7",
0b0000000000000100000000000000000000000000000000000000000000000000 => "f7",
0b0000000000001000000000000000000000000000000000000000000000000000 => "e7",
0b0000000000010000000000000000000000000000000000000000000000000000 => "d7",
0b0000000000100000000000000000000000000000000000000000000000000000 => "c7",
0b0000000001000000000000000000000000000000000000000000000000000000 => "b7",
0b0000000010000000000000000000000000000000000000000000000000000000 => "a7",
0b0000000100000000000000000000000000000000000000000000000000000000 => "h8",
0b0000001000000000000000000000000000000000000000000000000000000000 => "g8",
0b0000010000000000000000000000000000000000000000000000000000000000 => "f8",
0b0000100000000000000000000000000000000000000000000000000000000000 => "e8",
0b0001000000000000000000000000000000000000000000000000000000000000 => "d8",
0b0010000000000000000000000000000000000000000000000000000000000000 => "c8",
0b0100000000000000000000000000000000000000000000000000000000000000 => "b8",
0b1000000000000000000000000000000000000000000000000000000000000000 => "a8"
)

# bitsquare as a key, output ID as in board definition (1 on h1, 2 on g1 ..., 9 on h2 ... )
BITSQUARES_TO_ID=Dict(
    0b0000000000000000000000000000000000000000000000000000000000000001 => 1,
    0b0000000000000000000000000000000000000000000000000000000000000010 => 2,
    0b0000000000000000000000000000000000000000000000000000000000000100 => 3,
    0b0000000000000000000000000000000000000000000000000000000000001000 => 4,
    0b0000000000000000000000000000000000000000000000000000000000010000 => 5,
    0b0000000000000000000000000000000000000000000000000000000000100000 => 6,
    0b0000000000000000000000000000000000000000000000000000000001000000 => 7,
    0b0000000000000000000000000000000000000000000000000000000010000000 => 8,
    0b0000000000000000000000000000000000000000000000000000000100000000 => 9,
    0b0000000000000000000000000000000000000000000000000000001000000000 => 10,
    0b0000000000000000000000000000000000000000000000000000010000000000 => 11,
    0b0000000000000000000000000000000000000000000000000000100000000000 => 12,
    0b0000000000000000000000000000000000000000000000000001000000000000 => 13,
    0b0000000000000000000000000000000000000000000000000010000000000000 => 14,
    0b0000000000000000000000000000000000000000000000000100000000000000 => 15,
    0b0000000000000000000000000000000000000000000000001000000000000000 => 16,
    0b0000000000000000000000000000000000000000000000010000000000000000 => 17,
    0b0000000000000000000000000000000000000000000000100000000000000000 => 18,
    0b0000000000000000000000000000000000000000000001000000000000000000 => 19,
    0b0000000000000000000000000000000000000000000010000000000000000000 => 20,
    0b0000000000000000000000000000000000000000000100000000000000000000 => 21,
    0b0000000000000000000000000000000000000000001000000000000000000000 => 22,
    0b0000000000000000000000000000000000000000010000000000000000000000 => 23,
    0b0000000000000000000000000000000000000000100000000000000000000000 => 24,
    0b0000000000000000000000000000000000000001000000000000000000000000 => 25,
    0b0000000000000000000000000000000000000010000000000000000000000000 => 26,
    0b0000000000000000000000000000000000000100000000000000000000000000 => 27,
    0b0000000000000000000000000000000000001000000000000000000000000000 => 28,
    0b0000000000000000000000000000000000010000000000000000000000000000 => 29,
    0b0000000000000000000000000000000000100000000000000000000000000000 => 30,
    0b0000000000000000000000000000000001000000000000000000000000000000 => 31,
    0b0000000000000000000000000000000010000000000000000000000000000000 => 32,
    0b0000000000000000000000000000000100000000000000000000000000000000 => 33,
    0b0000000000000000000000000000001000000000000000000000000000000000 => 34,
    0b0000000000000000000000000000010000000000000000000000000000000000 => 35,
    0b0000000000000000000000000000100000000000000000000000000000000000 => 36,
    0b0000000000000000000000000001000000000000000000000000000000000000 => 37,
    0b0000000000000000000000000010000000000000000000000000000000000000 => 38,
    0b0000000000000000000000000100000000000000000000000000000000000000 => 39,
    0b0000000000000000000000001000000000000000000000000000000000000000 => 40,
    0b0000000000000000000000010000000000000000000000000000000000000000 => 41,
    0b0000000000000000000000100000000000000000000000000000000000000000 => 42,
    0b0000000000000000000001000000000000000000000000000000000000000000 => 43,
    0b0000000000000000000010000000000000000000000000000000000000000000 => 44,
    0b0000000000000000000100000000000000000000000000000000000000000000 => 45,
    0b0000000000000000001000000000000000000000000000000000000000000000 => 46,
    0b0000000000000000010000000000000000000000000000000000000000000000 => 47,
    0b0000000000000000100000000000000000000000000000000000000000000000 => 48,
    0b0000000000000001000000000000000000000000000000000000000000000000 => 49,
    0b0000000000000010000000000000000000000000000000000000000000000000 => 50,
    0b0000000000000100000000000000000000000000000000000000000000000000 => 51,
    0b0000000000001000000000000000000000000000000000000000000000000000 => 52,
    0b0000000000010000000000000000000000000000000000000000000000000000 => 53,
    0b0000000000100000000000000000000000000000000000000000000000000000 => 54,
    0b0000000001000000000000000000000000000000000000000000000000000000 => 55,
    0b0000000010000000000000000000000000000000000000000000000000000000 => 56,
    0b0000000100000000000000000000000000000000000000000000000000000000 => 57,
    0b0000001000000000000000000000000000000000000000000000000000000000 => 58,
    0b0000010000000000000000000000000000000000000000000000000000000000 => 59,
    0b0000100000000000000000000000000000000000000000000000000000000000 => 60,
    0b0001000000000000000000000000000000000000000000000000000000000000 => 61,
    0b0010000000000000000000000000000000000000000000000000000000000000 => 62,
    0b0100000000000000000000000000000000000000000000000000000000000000 => 63,
    0b1000000000000000000000000000000000000000000000000000000000000000 => 64
)